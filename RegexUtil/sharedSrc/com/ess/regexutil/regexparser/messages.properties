OpenBracket.OpenBracket_FlagModification=Flag modification
OpenBracket.OpenBracket.Non_capturing_group=Non-capturing group
OpenBracket.OpenBracket.capturing_group_n=Capturing group \#
AndInBracket.AndInBracket.description=Intersection of character sets\n\nMatches a character that is in both of the given sets.\n\nExample:\nThe expression "[a-z&&[^ecl]]" matches any character from a to z, excluding e, c, and l.
BraceMulteplexors.1={n} - Greedy match exactly n times
BraceMulteplexors.2={n,} - Greedy match >= n times
BraceMulteplexors.3={n,m} - Greedy match >= n times but <= m times
BraceMulteplexors.4={n}? - Lazy match exactly n times
BraceMulteplexors.5={n,}? - Lazy match >= n times
BraceMulteplexors.6={n,m}? - Lazy match >= n times but <= m times
BraceMulteplexors.7={n}+ - Possessive match exactly n times (no backtracking)
BraceMulteplexors.8={n,}+ - Possessive match >= n times (no backtracking)
BraceMulteplexors.9={n,m}+ - Possessive match >= n times but <= m times (no backtracking)
BraceMulteplexors.10='}' not found
BraceMulteplexors.Is_not_legal_argument="%s" - is not legal argument here
BraceMulteplexors.first_big=First number ('%s') must be greater or equals than second number ('%s')\n({n,m} - Greedy match >= n times but <= m times)
Bracket.PairedBracketNotFound=Paired bracke not found
