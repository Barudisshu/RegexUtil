<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="Applet" default="all" basedir=".">

    <property name="dist" value="${basedir}/dist"/>
    <property name="jar" value="${dist}/regexApplet.jar"/>

    <target name="clean">
        <mkdir dir="${dist}"/>
        <delete>
            <fileset dir="${dist}">
            </fileset>
        </delete>
        <delete dir="${dist}/comp"/>
    </target>

    <target name="buildApplet" depends="clean">

        <property name="compPath" value="${dist}/comp"/>

        <mkdir dir="${compPath}"/>

        <javac srcdir="${basedir}/../RegexUtil/sharedSrc" destdir="${compPath}" target="1.5"/>
        <javac classpath="${compPath}" srcdir="${basedir}/../SwingContrils/src" destdir="${compPath}" target="1.5"/>
        <javac classpath="${compPath}" srcdir="${basedir}/src" destdir="${compPath}" target="1.5"/>

        <copy file="${basedir}/../RegexUtil/sharedSrc/com/ess/regexutil/regexparser/messages.properties"
              todir="${compPath}/com/ess/regexutil/regexparser"/>

        <jar jarfile="${jar}">
            <fileset dir="${compPath}">
            </fileset>
        </jar>
    </target>

    <target name="all" depends="buildApplet">
        <antcall target="obfuscate"/>
    </target>

    <target name="idea" depends="buildApplet">
        <copy file="${jar}" todir="../USP/root/"/>
    </target>

    <target name="obfuscate">
        <property name="jarNoApf" value="${dist}/regexApplet_noOpf.jar"/>
        <copy file="${jar}" tofile="${jarNoApf}" overwrite="true"/>

        <taskdef resource="proguard/ant/task.properties"
                 classpath="proguard.jar"/>
        
        <proguard printseeds="on">

            <!-- Specify the input jars, output jars, and library jars. -->

            <injar file="${jarNoApf}"/>
            <outjar file="${jar}"/>

            <libraryjar file="${java.home}/lib/rt.jar"/>

            <!-- Preserve all public applets. -->

            <keep access="public" extends="javax.swing.JApplet"/>

            <keepclassmembers extends="javax.swing.JApplet">
                <method access="public"/>
            </keepclassmembers>

            <!-- Preserve all annotations. -->

            <keepattribute name="*Annotation*"/>

            <!-- Preserve all native method names and the names of their classes. -->

            <keepclasseswithmembernames>
                <method access="native"/>
            </keepclasseswithmembernames>

            <!-- Preserve the methods that are required in all enumeration classes. -->

            <keepclassmembers extends="java.lang.Enum">
                <method access="public static"
                        type="**[]"
                        name="values"
                        parameters=""/>
                <method access="public static"
                        type="**"
                        name="valueOf"
                        parameters="java.lang.String"/>
            </keepclassmembers>

            <!-- Explicitly preserve all serialization members. The Serializable
      interface is only a marker interface, so it wouldn't save them.
      You can comment this out if your library doesn't use serialization.
      If your code contains serializable classes that have to be backward
      compatible, please refer to the manual. -->

            <keepclassmembers implements="java.io.Serializable">
                <field access="static final"
                       type="long"
                       name="serialVersionUID"/>
                <field access="static final"
                       type="java.io.ObjectStreamField[]"
                       name="serialPersistentFields"/>
                <method access="private"
                        type="void"
                        name="writeObject"
                        parameters="java.io.ObjectOutputStream"/>
                <method access="private"
                        type="void"
                        name="readObject"
                        parameters="java.io.ObjectInputStream"/>
                <method type="java.lang.Object"
                        name="writeReplace"
                        parameters=""/>
                <method type="java.lang.Object"
                        name="readResolve"
                        parameters=""/>
            </keepclassmembers>

            <!-- Your application may contain more items that need to be preserved;
    typically classes that are dynamically created using Class.forName -->

        </proguard>
    </target>


</project>